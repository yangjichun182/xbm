<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	     http://www.springframework.org/schema/beans/spring-beans.xsd    
	     http://www.springframework.org/schema/context  
         http://www.springframework.org/schema/context/spring-context.xsd  
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd
         http://www.springframework.org/schema/cache  
         http://www.springframework.org/schema/cache/spring-cache.xsd">
	<!-- 这里需要注意一下,报这个错误:Referenced file contains errors (http://www.springframework.org/schema/mvc/spring-mvc.xsd). 
		For more information, right click on the message in the Problems View and 
		select "Show Details..." spring-mvc.xml /Test_Servlet/src/main/resources/springMvc 
		line 1 XML Problem 这是由于我们前面在使用springMVC的时候和使用spring 的配置文件配置成一样的了，所以报错 -->
	<!-- 启动 spring 的注解功能 -->
	<context:annotation-config />

	<!-- 自动扫描com.xbm包 -->
	<context:component-scan base-package="com.xbm*">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 引入外置文件 <context:property-placeholder location="classpath*:properties/db.properties" 
		/>也可以 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:config/jdbc.properties" />
	</bean>
	

	<!-- 数据库连接池配置 dbcp2 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- spring和MyBatis完美整合 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 具体指定xml文件，可不配 -->
		<property name="configLocation" value="classpath:persistence/mybatis.xml" />
		<!-- 自动扫描mapping.xml文件，**表示迭代查找 ,也可在mybati.xml中单独指定xml文件 -->
		<property name="mapperLocations" value="classpath:mybatis/dao/*.xml" />
	</bean>

	<!-- 自动扫描ccom.xbm.dao下的所有dao接口，并实现这些接口，可直接在程序中使用dao接口，不用再获取sqlsession对象 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- basePackage 属性是映射器接口文件的包路径。 你可以使用分号或逗号 作为分隔符设置多于一个的包路径 -->
		<property name="basePackage" value="com.xbm.dao" />
		<!-- 因为会自动装配 SqlSessionFactory和SqlSessionTemplate 所以没 有 必 要 去 指 定 SqlSessionFactory或 
			SqlSessionTemplate 因此可省略不配置； 但是,如果你使 用了一个 以上的 DataSource，那么自动装配可能会失效。 这种 
			情况下，你可以使用sqlSessionFactoryBeanName或sqlSessionTemplateBeanName属性来设置正确的 bean名称来使用； -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- 事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 使用声明式事务 -->
	<tx:annotation-driven transaction-manager="txManager" />


</beans>
